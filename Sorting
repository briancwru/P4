import java.io.IOException;
import java.util.PriorityQueue;
import java.util.Random;

import static java.util.Arrays.sort;


public class Sorting {

    public static void heapSort(int[] arr){
        /*Use PriorityQueue to heapify this array into ascending order
         * which,in another way to say,it's max-on-top binary heap tree
         * */
        PriorityQueue<Integer> pq = new PriorityQueue<>(arr.length, (Integer i, Integer j) -> i.compareTo(j));
        /*Put everything in the input arr to the heapsort itself*/
        for(int i = 0; i< arr.length;i++){
            pq.add(arr[i]);
        }
        int[] setArr = new int[arr.length]; // create a new array to store the sorted one
        int index = 0;
        /*
         *hepify every time the biggest number is retrieved from the heap
         */
        while (pq.size() != 0){
            setArr[index]= pq.poll();
            pq = new PriorityQueue<Integer>(pq);
            index++;
        }
        /*assign the sorted array to the input arr*/
        for(int i = 0;i<arr.length;i++) {
            arr[i] = setArr[i];
        }

    }


    public static void quickSort(int[] arr) {
        Sorting.myQuickSort(arr,0,arr.length-1);
    }

    public static void myQuickSort(int[] arr,int first,int last){

        int index = partition(arr,first,last); //find the index

        if(first<index-1){
            myQuickSort(arr,first,index-1);
        }
        if(last > index){
            myQuickSort(arr,index,last);
        }
    }

    public static int partition(int[] arr,int first,int last){
        /*
         * use the median of three element to minimize the chance that
         */
        int left = arr[first];
        int right = arr[last];
        int middle = arr[ (first+last)/2];
        int[] pivotChoice = new int[]{left,right,middle};
        sort(pivotChoice);
        int median = pivotChoice[1];
        int pivot = median;

        int i = first; //left most index
        int j = last;  //right most index

        while(i<=j) {
            while (arr[i] < pivot) {
                i++;
            }
            while (arr[j] > pivot) {
                j--;
            }
            if (i<=j) {
                int store = arr[i];
                arr[i] = arr[j];
                arr[j] = store;
                i++;
                j--;
            }
        }
        return i;
    }


    public static void mergeSort(int[] arr){
        if(arr.length > 1) {

            int middle = arr.length / 2;

            // divide left part
            int[] leftArr = new int[middle];
            for (int i = 0; i < middle; i++) {
                leftArr[i] = arr[i];
            }

            // divide right part
            int[] rightArr = new int[arr.length - middle];
            for (int i = middle; i < arr.length; i++) {
                rightArr[i - middle] = arr[i];
            }
            mergeSort(leftArr);  //keep dividing the left array
            mergeSort(rightArr); //keep dividing the right array

            int i = 0; //leftArr index
            int j = 0; //rightArr index
            int k = 0; // new Array index

            // Merge left and right arrays
            while (i < leftArr.length && j < rightArr.length) {
                if (leftArr[i] < rightArr[j]) {
                    arr[k] = leftArr[i];
                    i++;
                }
                else {
                    arr[k] = rightArr[j];
                    j++;
                }
                k++;
            }

            while (i < leftArr.length) {
                arr[k] = leftArr[i];
                i++;
                k++;
            }
            while (j < rightArr.length) {
                arr[k] = rightArr[j];
                j++;
                k++;
            }
        }
    }


    public static void main(String args[]) throws IOException {
        int[] arr = Report1.reverseSortedArr(Report1.GenunSortedArr());



        for(int i =0;i<arr.length;i++){
            System.out.println(arr[i]);
        }
    }


}
